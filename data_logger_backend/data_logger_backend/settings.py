"""
Django settings for data_logger_backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import sys
from decouple import Config, RepositoryEnv, Csv
import os
from django.utils.translation import gettext_lazy as _
from secrets_loader import SECRETS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
if getattr(sys, 'frozen', False):
    # شغال كـ exe → جرب تدور على .env بجانب run.exe
    env_external = os.path.join(os.path.dirname(sys.executable), '.env')
    if os.path.exists(env_external):
        config = Config(RepositoryEnv(env_external))
    else:
        config = Config(RepositoryEnv(os.path.join(sys._MEIPASS, 'data_logger_backend', '.env')))
else:
    # شغال كسورس كود
    config = Config(RepositoryEnv(os.path.join(BASE_DIR, '.env')))


STATIC_URL = '/static/'

# Specify the path that contains static files in the project
if getattr(sys, 'frozen', False):
    # داخل EXE → static موجود في sys._MEIPASS/static
    STATICFILES_DIRS = [os.path.join(sys._MEIPASS, 'static')]
else:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRETS['SECRET_KEY']
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'rest_framework',
    'rest_framework.authtoken',
    'channels',
    "corsheaders",
    'authentication.apps.AuthenticationConfig',
    'home',
    'device_details',
    'logs',
    'users',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'data_logger_backend.middleware.OnlyAllowFromCaddyMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

CORS_ALLOWED_ORIGINS = config("CORS_ALLOWED_ORIGINS", cast=Csv())

ROOT_URLCONF = 'data_logger_backend.urls'

BASE_IP = config("BASE_IP", default="127.0.0.1")
BASE_PORT = config("BASE_PORT", default="8000")
BASE_PROTOCOL = config("BASE_PROTOCOL", default="http")

if BASE_PROTOCOL == "https" and BASE_PORT == "443":
    BASE_URL = f"{BASE_PROTOCOL}://{BASE_IP}"
elif BASE_PROTOCOL == "http" and BASE_PORT == "80":
    BASE_URL = f"{BASE_PROTOCOL}://{BASE_IP}"
else:
    BASE_URL = f"{BASE_PROTOCOL}://{BASE_IP}:{BASE_PORT}"
    
ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())
CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", cast=Csv())

TWILIO_ACCOUNT_SID = SECRETS['TWILIO_ACCOUNT_SID']
TWILIO_AUTH_TOKEN = SECRETS['TWILIO_AUTH_TOKEN']
TWILIO_PHONE_NUMBER = SECRETS['TWILIO_PHONE_NUMBER']

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.i18n', 
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],  # أو IP وPort الـ Redis عندك
        },
    },
}

ASGI_APPLICATION = "data_logger_backend.asgi.application"
WSGI_APPLICATION = 'data_logger_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': SECRETS['DB_NAME'],
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': SECRETS['DB_HOST'],
        'PORT': SECRETS['DB_PORT'],
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGES = [
    ('ar', _('Arabic')),
    ('en', _('English')),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_L10N = True

USE_TZ = False

TIME_ZONE = 'Africa/Cairo'



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# production
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# development
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'authentication.CustomUser'  # Replace 'your_app_name'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = SECRETS['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = SECRETS['EMAIL_HOST_PASSWORD']  # Use App Password if you have 2FA enabled
DEFAULT_FROM_EMAIL = 'tomatiki@gmail.com'

